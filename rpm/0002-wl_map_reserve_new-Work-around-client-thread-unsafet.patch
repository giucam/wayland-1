From 3529cfcf433f496a5d8700d50b66f54b51f534a4 Mon Sep 17 00:00:00 2001
From: Kalle Vahlman <kalle.vahlman@movial.com>
Date: Wed, 30 Oct 2013 08:36:30 +0000
Subject: [PATCH 2/2] wl_map_reserve_new: Work around client thread-unsafety

This is a work-around for the case where a client does wl_proxy_create()
and wl_proxy_marshal() in two threads so that the calls are mixed up and
we end up with the id's in reversed order.

The real fix would be to remove the locking gap between wl_proxy_create()
and wl_proxy_marshal() but this fixes the most obvious case unobtrusively
and without risking deadlocks. You'll still get an error for sending bogus
ids if you have more than off-by-one error.

Signed-off-by: Kalle Vahlman <kalle.vahlman@movial.com>
---
 src/wayland-util.c |   14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/wayland-util.c b/src/wayland-util.c
index 598ab42..97140f3 100644
--- a/src/wayland-util.c
+++ b/src/wayland-util.c
@@ -21,6 +21,7 @@
  * OF THIS SOFTWARE.
  */
 
+#include <stdio.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <string.h>
@@ -238,6 +239,19 @@ wl_map_reserve_new(struct wl_map *map, uint32_t i)
 
 	count = entries->size / sizeof *start;
 
+	/* This is a work-around for the case where a client does wl_proxy_create()
+	 * and wl_proxy_marshal() in two threads so that the calls are mixed up and
+	 * we end up with the id's in reversed order. Real fix would be to remove
+	 * the locking gap between wl_proxy_create() and wl_proxy_marshal().
+	 */
+	if (count < i) {
+		fprintf(stderr, "WARNING: Wayland client probably sent id's out-of-order\n");
+		wl_array_add(entries, sizeof *start);
+		start = entries->data;
+		start[count].data = NULL;
+		count = entries->size / sizeof *start;
+	}
+
 	if (count < i)
 		return -1;
 
-- 
1.7.10.3

